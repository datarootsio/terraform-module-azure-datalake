name: "terratests"
on:
  repository_dispatch:
    types: [run-tests-command]
  schedule:
    - cron:  '0 0 * * 1'
env:
  tests_timeout: "2h"
  golangci_lint_version: "v1.26"
  slack_channel: terraform-data-lake-module
  DATABRICKS_PROVIDER_VERSION: "v0.2.0"
jobs:
  terratests:
    name: "Terratests"
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
    
      - id: slack
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: ${{ env.slack_channel }}
          status: STARTED
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Get the target branch name
        id: vars
        run: |
          branch=${{ github.event.client_payload.pull_request.head.ref }}
          if [[ -z "$branch" ]]; then branch="master"; fi
          echo ::set-output name=branch::$branch

      - name: Install databricks provider dependency
        run: curl -s "https://raw.githubusercontent.com/databrickslabs/terraform-provider-databricks/$DATABRICKS_PROVIDER_VERSION/godownloader-databricks-provider.sh" | bash -s -- -b "$HOME/.terraform.d/plugins" $DATABRICKS_PROVIDER_VERSION

      - name: Azure Login
        uses: Azure/login@v1.1
        with:
          enable-AzPSSession: true
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: "Checkout"
        uses: actions/checkout@master
        with:
          ref: ${{ steps.vars.outputs.branch }}
      
      - name: "go vet"
        run: go vet ./...

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          args: --timeout=3m0s
          version: ${{ env.golangci_lint_version }}

      - name: "go test"
        run: go test -timeout ${{ env.tests_timeout }} ./...
      
      - name: "cleanup Azure resources"
        if: ${{ always() }}
        run: |
          az group list --subscription $ARM_SUBSCRIPTION_ID --tag "Terratest=$GITHUB_RUN_ID" -o table
          for group in $(az group list --subscription $ARM_SUBSCRIPTION_ID --tag "Terratest=$GITHUB_RUN_ID" --query "[].name" -o tsv | grep -v dbks); do az group delete -y --no-wait --subscription $ARM_SUBSCRIPTION_ID -n $group; done 

      - id: slack-success
        if: success()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: ${{ env.slack_channel }}
          status: SUCCESS
          color: good
          message_id: ${{ steps.slack.outputs.message_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - id: slack-failure
        if: failure()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: ${{ env.slack_channel }}
          status: FAILED
          color: danger
          message_id: ${{ steps.slack.outputs.message_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
